// A grammar for T-SQL, suitable for parsing by recursive descent
// Copyright Ranjan Dahal

print ::= PRINT msg_str | @local_variable | STRING_LITERAL
  
shutdown ::= SHUTDOWN [ WITH NOWAIT ]  

kill ::= KILL { INT_LITERAL | UOW } [ WITH STATUSONLY ] 
database_name ::= IDENTIFIER

use ::= USE { database_name } [;]
 
go ::= GO [INT_LITERAL]

begin_end ::= BEGIN  
				{ sql_statement | statement_block }   
			  END 

if_else ::= IF boolean_expression   
				 { sql_statement | statement_block }   
			[ ELSE { sql_statement | statement_block } ]   

boolean_expression ::= (TRUE | FALSE)

return ::= RETURN [ INT_LITERAL ]   

try_catch ::= BEGIN TRY  
					 { sql_statement | statement_block }  
				END TRY  
				BEGIN CATCH  
					 [ { sql_statement | statement_block } ]  
				END CATCH  
				[ ; ]
throw ::= THROW [ { error_number | @local_variable },  
				{ message | @local_variable },  
				{ state | @local_variable } ]   
				[ ; ]  

waitfor ::= WAITFOR   
			{  
				DELAY 'time_to_pass'   
			  | TIME 'time_to_execute'   
			  | [ ( receive_statement ) | ( get_conversation_group_statement ) ]   
				[ , TIMEOUT timeout ]  
			}  

while ::= WHILE Boolean_expression   
			{ sql_statement | statement_block | BREAK | CONTINUE }

compilationUnit ::= [PACKAGE qualifiedIdentifier SEMI]
                    {IMPORT  qualifiedIdentifier SEMI}
                    {typeDeclaration} EOF 

qualifiedIdentifier ::= IDENTIFIER {DOT IDENTIFIER}

typeDeclaration ::= modifiers (classDeclaration | interfaceDeclaration)
					| SEMI

modifiers ::= {PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT
				| FINAL | STRICTFP}

classDeclaration ::= CLASS IDENTIFIER 
                       [EXTENDS qualifiedIdentifier] 
                       [IMPLEMENTS qualifiedIdentifier {, qualifiedIdentifier}]
                       classBody

interfaceDeclaration 	::= INTERFACE IDENTIFIER
							[EXTENDS qualifiedIdentifier {, qualifiedIdentifier}]
                       		interfaceBody                   

classBody ::= LCURLY {static block
                      | block
                      | modifiers memberDecl
                     }
              RCURLY

interfaceBody ::= LCURLY { modifiers interfaceMemberDecl } RCURLY

memberDecl ::= IDENTIFIER            // constructor
                 formalParameters
                 [THROWS qualifiedIdentifier {, qualifiedIdentifier }] block
             | (VOID | type) IDENTIFIER  // method
                 formalParameters
                 [THROWS qualifiedIdentifier {, qualifiedIdentifier }] SEMI
             | type variableDeclarators SEMI // field

interfaceMemberDecl ::= (VOID | type) IDENTIFIER   //method
                            formalParameters
                            [THROWS qualifiedIdentifier {, qualifiedIdentifier }] SEMI
                        | type variableDeclarators SEMI // field

block ::= LCURLY {blockStatement} RCURLY 

blockStatement ::= localVariableDeclarationStatement
                 | statement

statement ::= block
            | IF parExpression statement [ELSE statement]
            | FOR LPAREN [forInit] SEMI [expression] SEMI [forUpdate] RPAREN statement
            | FOR LPAREN type IDENTIFIER : expression RPAREN statement
            | WHILE parExpression statement
            | TRY block
                { CATCH LPAREN formalParameter RPAREN block }
                    [FINALLY block] //must be present if no catch
            | RETURN [expression] SEMI
            | THROW expression SEMI
            | SEMI 
            | statementExpression SEMI

forInit ::= statementExpression {, statementExpression }
                | [final] type variableDeclarators

forUpdate ::= statementExpression {, statementExpression }


formalParameters ::= LPAREN 
                       [formalParameter {COMMA formalParameter}]
                     RPAREN

formalParameter ::= type IDENTIFIER

parExpression ::= LPAREN expression RPAREN

localVariableDeclarationStatement ::= [final] type variableDeclarators SEMI

variableDeclarators ::= variableDeclarator {COMMA variableDeclarator}

variableDeclarator ::= IDENTIFIER [ASSIGN variableInitializer]
                    
variableInitializer ::= arrayInitializer | expression

arrayInitializer ::= LCURLY 
                       [variableInitializer {COMMA variableInitializer}]
                     RCURLY 

arguments ::= LPAREN [expression {COMMA expression}] RPAREN

type ::= referenceType | basicType

basicType ::= BOOLEAN | CHAR | INT | DOUBLE

referenceType ::= basicType LBRACK RBRACK {LBRACK RBRACK}
                | qualifiedIdentifier {LBRACK RBRACK}

statementExpression ::= expression // but must have side-effect, eg i++

expression ::= assignmentExpression

assignmentExpression ::= conditionalOrExpression  // must be a valid lhs
                           [(ASSIGN | PLUS_ASSIGN
                           	| MINUS_ASSIGN | STAR_ASSIGN
                           	| DIV_ASSIGN | REM_ASSIGN) assignmentExpression]

conditionalExpression ::= conditionalOrExpression   // level 12
                            [TERNARY assignmentExpression : conditionalExpression]

conditionalOrExpression ::= conditionalAndExpression   //level 11
                                {LOR conditionalAndExpression }

conditionalAndExpression ::= inclusiveOrExpression // level 10
                               {LAND inclusiveOrExpression}
                      
inclusiveOrExpression ::= exclusiveOrExpression  // level 9
                             {IOR exclusiveOrExpression}

exclusiveOrExpression ::= andExpression  // level 8
                              {XOR andExpression}

andExpression ::= equalityExpression  // level 7
                      {AND equalityExpression}

equalityExpression ::= relationalExpression  // level 6
                         {EQUAL relationalExpression}

relationalExpression ::= shiftExpression       // level 5
                           [(GT | LE) shiftExpression
                           | INSTANCEOF referenceType]

shiftExpression ::= additiveExpression  // level 4
                         {(LSHIFT | RSHIFT | LRSHIFT) additiveExpression}

additiveExpression ::= multiplicativeExpression // level 3
                         {(PLUS | MINUS) multiplicativeExpression}

multiplicativeExpression ::= unaryExpression       // level 2
                                {(STAR | DIV | REM) unaryExpression}

unaryExpression ::= INC unaryExpression  // level 1
                  | MINUS unaryExpression
                  | PLUS unaryExpression
                  | DEC unaryExpression
                  | NOT unaryExpression
                  | simpleUnaryExpression

simpleUnaryExpression ::= LNOT unaryExpression
                        | LPAREN basicType RPAREN unaryExpression //casted
                        | LPAREN // casted               
                            referenceType
                          RPAREN simpleUnaryExpression
                        | postfixExpression 

postfixExpression ::= primary {selector} {DEC | INC}

selector ::= DOT qualifiedIdentifier [arguments]
           | LBRACK expression RBRACK

primary ::= parExpression
          | THIS [arguments]
          | SUPER ( arguments 
                  | DOT IDENTIFIER [arguments] 
                  )
          | literal
          | NEW creator
          | qualifiedIdentifier [arguments]

creator ::= (basicType | qualifiedIdentifier) 
              ( arguments
              | LBRACK RBRACK {LBRACK RBRACK} [arrayInitializer]
              | newArrayDeclarator
              )

newArrayDeclarator ::= LBRACK expression RBRACK 
                         {LBRACK expression RBRACK} {LBRACK RBRACK}

literal ::= INT_LITERAL | CHAR_LITERAL | STRING_LITERAL
			| LONG_LITERAL | FLOAT_LITERAL	| DOUBLE_LITERAL
          	| TRUE        | FALSE        | NULL
